// Code generated by protoc-gen-go.
// source: echo.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	echo.proto

It has these top-level messages:
	Ping
	Pong
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ping struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ping) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type Pong struct {
	Message   string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	Timestamp int64  `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Pong) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Pong) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*Ping)(nil), "pb.Ping")
	proto.RegisterType((*Pong)(nil), "pb.Pong")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Echo service

type EchoClient interface {
	Send(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	// Subscribe opens a stream and returns the Ping message and an Unix timestamp every second.
	Subscribe(ctx context.Context, in *Ping, opts ...grpc.CallOption) (Echo_SubscribeClient, error)
}

type echoClient struct {
	cc *grpc.ClientConn
}

func NewEchoClient(cc *grpc.ClientConn) EchoClient {
	return &echoClient{cc}
}

func (c *echoClient) Send(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/pb.Echo/Send", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoClient) Subscribe(ctx context.Context, in *Ping, opts ...grpc.CallOption) (Echo_SubscribeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Echo_serviceDesc.Streams[0], c.cc, "/pb.Echo/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &echoSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Echo_SubscribeClient interface {
	Recv() (*Pong, error)
	grpc.ClientStream
}

type echoSubscribeClient struct {
	grpc.ClientStream
}

func (x *echoSubscribeClient) Recv() (*Pong, error) {
	m := new(Pong)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Echo service

type EchoServer interface {
	Send(context.Context, *Ping) (*Pong, error)
	// Subscribe opens a stream and returns the Ping message and an Unix timestamp every second.
	Subscribe(*Ping, Echo_SubscribeServer) error
}

func RegisterEchoServer(s *grpc.Server, srv EchoServer) {
	s.RegisterService(&_Echo_serviceDesc, srv)
}

func _Echo_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Echo/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServer).Send(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Echo_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Ping)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EchoServer).Subscribe(m, &echoSubscribeServer{stream})
}

type Echo_SubscribeServer interface {
	Send(*Pong) error
	grpc.ServerStream
}

type echoSubscribeServer struct {
	grpc.ServerStream
}

func (x *echoSubscribeServer) Send(m *Pong) error {
	return x.ServerStream.SendMsg(m)
}

var _Echo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Echo",
	HandlerType: (*EchoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Echo_Send_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _Echo_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "echo.proto",
}

func init() { proto.RegisterFile("echo.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x4d, 0xce, 0xc8,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2a, 0x48, 0x52, 0x52, 0xe0, 0x62, 0x09, 0xc8,
	0xcc, 0x4b, 0x17, 0x92, 0xe0, 0x62, 0xcf, 0x4d, 0x2d, 0x2e, 0x4e, 0x4c, 0x4f, 0x95, 0x60, 0x54,
	0x60, 0xd4, 0xe0, 0x0c, 0x82, 0x71, 0x95, 0xec, 0xb8, 0x58, 0x02, 0xf2, 0xf1, 0xa9, 0x10, 0x92,
	0xe1, 0xe2, 0x2c, 0xc9, 0xcc, 0x4d, 0x2d, 0x2e, 0x49, 0xcc, 0x2d, 0x90, 0x60, 0x52, 0x60, 0xd4,
	0x60, 0x0e, 0x42, 0x08, 0x18, 0x79, 0x72, 0xb1, 0xb8, 0x26, 0x67, 0xe4, 0x0b, 0xc9, 0x70, 0xb1,
	0x04, 0xa7, 0xe6, 0xa5, 0x08, 0x71, 0xe8, 0x15, 0x24, 0xe9, 0x81, 0xec, 0x94, 0x82, 0xb0, 0xf2,
	0xf3, 0xd2, 0x95, 0x18, 0x84, 0x94, 0xb9, 0x38, 0x83, 0x4b, 0x93, 0x8a, 0x93, 0x8b, 0x32, 0x93,
	0x52, 0xb1, 0x2b, 0x31, 0x60, 0x4c, 0x62, 0x03, 0xbb, 0xdb, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0x8e, 0x31, 0xc1, 0x86, 0xc5, 0x00, 0x00, 0x00,
}
